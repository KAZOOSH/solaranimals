
T45PiezoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076d  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057c  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000339  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001799  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	3e c0       	rjmp	.+124    	; 0x96 <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	44 d0       	rcall	.+136    	; 0xc4 <main>
  3c:	85 c0       	rjmp	.+266    	; 0x148 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <var_delay_10us>:
volatile uint16_t wdtcnt = 0;

//Variable delay
void var_delay_10us(uint8_t ten_us)
{
	for (uint8_t i=0; i<ten_us; i++) _delay_us(10);
  40:	88 23       	and	r24, r24
  42:	41 f0       	breq	.+16     	; 0x54 <var_delay_10us+0x14>
  44:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  46:	2a e1       	ldi	r18, 0x1A	; 26
  48:	2a 95       	dec	r18
  4a:	f1 f7       	brne	.-4      	; 0x48 <var_delay_10us+0x8>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <var_delay_10us+0xe>
  4e:	9f 5f       	subi	r25, 0xFF	; 255
  50:	89 13       	cpse	r24, r25
  52:	f9 cf       	rjmp	.-14     	; 0x46 <var_delay_10us+0x6>
  54:	08 95       	ret

00000056 <piepsen>:
}

//Pieps
void piepsen(uint16_t n, uint16_t t)
{
  56:	0f 93       	push	r16
  58:	1f 93       	push	r17
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	ec 01       	movw	r28, r24
  60:	16 2f       	mov	r17, r22
	PIEPPORT |= 1<<PIEPA;
  62:	c3 9a       	sbi	0x18, 3	; 24
	PIEPPORT &= ~(1<<PIEPB);
  64:	c4 98       	cbi	0x18, 4	; 24
	while(n)
  66:	89 2b       	or	r24, r25
  68:	39 f0       	breq	.+14     	; 0x78 <piepsen+0x22>
	{
		n--;
		PIEPPIN = (1<<PIEPB | 1<<PIEPA);
  6a:	08 e1       	ldi	r16, 0x18	; 24
{
	PIEPPORT |= 1<<PIEPA;
	PIEPPORT &= ~(1<<PIEPB);
	while(n)
	{
		n--;
  6c:	21 97       	sbiw	r28, 0x01	; 1
		PIEPPIN = (1<<PIEPB | 1<<PIEPA);
  6e:	06 bb       	out	0x16, r16	; 22
		var_delay_10us(t);
  70:	81 2f       	mov	r24, r17
  72:	e6 df       	rcall	.-52     	; 0x40 <var_delay_10us>
//Pieps
void piepsen(uint16_t n, uint16_t t)
{
	PIEPPORT |= 1<<PIEPA;
	PIEPPORT &= ~(1<<PIEPB);
	while(n)
  74:	20 97       	sbiw	r28, 0x00	; 0
  76:	d1 f7       	brne	.-12     	; 0x6c <piepsen+0x16>
	{
		n--;
		PIEPPIN = (1<<PIEPB | 1<<PIEPA);
		var_delay_10us(t);
	}
}
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	08 95       	ret

00000082 <init_wdt>:

//WDT-Interrupt-init
// START 8s TIMER, STROMVERBRAUCH 6 MIKROAMPRE
void init_wdt()
{
	cli();
  82:	f8 94       	cli
	MCUSR &= ~(1<<WDRF);
  84:	84 b7       	in	r24, 0x34	; 52
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDIE) | (1<<WDP3) | (1<<WDP0) ;
  8a:	81 b5       	in	r24, 0x21	; 33
  8c:	81 66       	ori	r24, 0x61	; 97
  8e:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
  90:	a8 95       	wdr
	sei();
  92:	78 94       	sei
  94:	08 95       	ret

00000096 <__vector_12>:
}


//WDT-Interrupt
ISR(WDT_vect)  // wakeup from sleeping
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	wdtcnt++;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:

int main(void)
{
    //init
	PIEPDDR |= 1<<PIEPA;
  c4:	bb 9a       	sbi	0x17, 3	; 23
	PIEPDDR |= 1<<PIEPB;
  c6:	bc 9a       	sbi	0x17, 4	; 23
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	87 7e       	andi	r24, 0xE7	; 231
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	85 bf       	out	0x35, r24	; 53
	init_wdt();
  d0:	d8 df       	rcall	.-80     	; 0x82 <init_wdt>
		
	//Job
	sei();
  d2:	78 94       	sei
	while (1) 
    {
		piepsen(1000, 5);
  d4:	65 e0       	ldi	r22, 0x05	; 5
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	88 ee       	ldi	r24, 0xE8	; 232
  da:	93 e0       	ldi	r25, 0x03	; 3
  dc:	bc df       	rcall	.-136    	; 0x56 <piepsen>
		piepsen(25, 200);
  de:	68 ec       	ldi	r22, 0xC8	; 200
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	89 e1       	ldi	r24, 0x19	; 25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	b7 df       	rcall	.-146    	; 0x56 <piepsen>
		piepsen(50, 500);
  e8:	64 ef       	ldi	r22, 0xF4	; 244
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	82 e3       	ldi	r24, 0x32	; 50
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	b2 df       	rcall	.-156    	; 0x56 <piepsen>
		piepsen(100, 50);
  f2:	62 e3       	ldi	r22, 0x32	; 50
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ad df       	rcall	.-166    	; 0x56 <piepsen>
		piepsen(200, 25);
  fc:	69 e1       	ldi	r22, 0x19	; 25
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	a8 df       	rcall	.-176    	; 0x56 <piepsen>
		piepsen(500, 10);
 106:	6a e0       	ldi	r22, 0x0A	; 10
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	84 ef       	ldi	r24, 0xF4	; 244
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	a3 df       	rcall	.-186    	; 0x56 <piepsen>
		piepsen(600, 8);
 110:	68 e0       	ldi	r22, 0x08	; 8
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	88 e5       	ldi	r24, 0x58	; 88
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	9e df       	rcall	.-196    	; 0x56 <piepsen>
		piepsen(700, 7);
 11a:	67 e0       	ldi	r22, 0x07	; 7
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	8c eb       	ldi	r24, 0xBC	; 188
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	99 df       	rcall	.-206    	; 0x56 <piepsen>
		piepsen(800, 6);
 124:	66 e0       	ldi	r22, 0x06	; 6
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	94 df       	rcall	.-216    	; 0x56 <piepsen>
		piepsen(1000, 5);
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	8f df       	rcall	.-226    	; 0x56 <piepsen>
		sleep_mode();
 138:	85 b7       	in	r24, 0x35	; 53
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	85 bf       	out	0x35, r24	; 53
 13e:	88 95       	sleep
 140:	85 b7       	in	r24, 0x35	; 53
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	85 bf       	out	0x35, r24	; 53
 146:	c6 cf       	rjmp	.-116    	; 0xd4 <main+0x10>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
