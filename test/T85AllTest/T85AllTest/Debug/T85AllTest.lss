
T85AllTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000258  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ac  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c5  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d2  00000000  00000000  00001185  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	74 c0       	rjmp	.+232    	; 0x102 <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	7a d0       	rcall	.+244    	; 0x130 <main>
  3c:	d1 c0       	rjmp	.+418    	; 0x1e0 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <var_delay_10us>:
volatile uint16_t wdtcnt = 0;

//Variable delay
void var_delay_10us(uint16_t ten_us)
{
	for (uint16_t i=0; i<ten_us; i++) _delay_us(10);
  40:	00 97       	sbiw	r24, 0x00	; 0
  42:	59 f0       	breq	.+22     	; 0x5a <var_delay_10us+0x1a>
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  48:	4a e1       	ldi	r20, 0x1A	; 26
  4a:	4a 95       	dec	r20
  4c:	f1 f7       	brne	.-4      	; 0x4a <var_delay_10us+0xa>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <var_delay_10us+0x10>
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	82 17       	cp	r24, r18
  56:	93 07       	cpc	r25, r19
  58:	b9 f7       	brne	.-18     	; 0x48 <var_delay_10us+0x8>
  5a:	08 95       	ret

0000005c <piepsen>:
}

//Pieps
void piepsen(uint16_t n, uint16_t t)
{
  5c:	ff 92       	push	r15
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	ec 01       	movw	r28, r24
  68:	8b 01       	movw	r16, r22
	MYPIN |= 1<<PIEPA;
  6a:	b3 9a       	sbi	0x16, 3	; 22
	MYPORT &= ~(1<<PIEPB);
  6c:	c4 98       	cbi	0x18, 4	; 24
	while(n)
  6e:	89 2b       	or	r24, r25
  70:	51 f0       	breq	.+20     	; 0x86 <piepsen+0x2a>
	{
		n--;
		MYPIN = (1<<PIEPB | 1<<PIEPA);
  72:	0f 2e       	mov	r0, r31
  74:	f8 e1       	ldi	r31, 0x18	; 24
  76:	ff 2e       	mov	r15, r31
  78:	f0 2d       	mov	r31, r0
{
	MYPIN |= 1<<PIEPA;
	MYPORT &= ~(1<<PIEPB);
	while(n)
	{
		n--;
  7a:	21 97       	sbiw	r28, 0x01	; 1
		MYPIN = (1<<PIEPB | 1<<PIEPA);
  7c:	f6 ba       	out	0x16, r15	; 22
		var_delay_10us(t);
  7e:	c8 01       	movw	r24, r16
  80:	df df       	rcall	.-66     	; 0x40 <var_delay_10us>
//Pieps
void piepsen(uint16_t n, uint16_t t)
{
	MYPIN |= 1<<PIEPA;
	MYPORT &= ~(1<<PIEPB);
	while(n)
  82:	20 97       	sbiw	r28, 0x00	; 0
  84:	d1 f7       	brne	.-12     	; 0x7a <piepsen+0x1e>
	{
		n--;
		MYPIN = (1<<PIEPB | 1<<PIEPA);
		var_delay_10us(t);
	}
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	08 95       	ret

00000092 <get_darkness>:
 //Lichtmessen
uint16_t get_darkness()
{
	uint16_t darkness = 0;	
	//booth junctions invers charging
	MYPORT &= ~(1<<LEDANODE1 | 1<<LEDANODE2);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8c 7f       	andi	r24, 0xFC	; 252
  96:	88 bb       	out	0x18, r24	; 24
	MYPORT |= 1<<LEDKATHODES;
  98:	c2 9a       	sbi	0x18, 2	; 24
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <get_darkness+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <get_darkness+0x10>
	_delay_us(10);
	//discharge junctions to HIGH
	MYDDR &= ~(1<<LEDANODE1 | 1<<LEDANODE2);
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	8c 7f       	andi	r24, 0xFC	; 252
  a6:	87 bb       	out	0x17, r24	; 23
	while(!(MYPIN & (1<<LEDANODE1 | 1<<LEDANODE2)) && (darkness < MAXDARKNESS))
  a8:	86 b3       	in	r24, 0x16	; 22
  aa:	83 70       	andi	r24, 0x03	; 3
  ac:	81 f4       	brne	.+32     	; 0xce <get_darkness+0x3c>
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	{
		darkness++;
  b2:	2f 5f       	subi	r18, 0xFF	; 255
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
  b6:	8a e1       	ldi	r24, 0x1A	; 26
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <get_darkness+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <get_darkness+0x2c>
	MYPORT &= ~(1<<LEDANODE1 | 1<<LEDANODE2);
	MYPORT |= 1<<LEDKATHODES;
	_delay_us(10);
	//discharge junctions to HIGH
	MYDDR &= ~(1<<LEDANODE1 | 1<<LEDANODE2);
	while(!(MYPIN & (1<<LEDANODE1 | 1<<LEDANODE2)) && (darkness < MAXDARKNESS))
  be:	96 b3       	in	r25, 0x16	; 22
  c0:	93 70       	andi	r25, 0x03	; 3
  c2:	39 f4       	brne	.+14     	; 0xd2 <get_darkness+0x40>
  c4:	20 31       	cpi	r18, 0x10	; 16
  c6:	87 e2       	ldi	r24, 0x27	; 39
  c8:	38 07       	cpc	r19, r24
  ca:	99 f7       	brne	.-26     	; 0xb2 <get_darkness+0x20>
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <get_darkness+0x40>
}

 //Lichtmessen
uint16_t get_darkness()
{
	uint16_t darkness = 0;	
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
	while(!(MYPIN & (1<<LEDANODE1 | 1<<LEDANODE2)) && (darkness < MAXDARKNESS))
	{
		darkness++;
		_delay_us(10);
	}
	MYPORT &= ~(1<<LEDKATHODES);
  d2:	c2 98       	cbi	0x18, 2	; 24
	MYDDR |= (1<<LEDANODE1 | 1<<LEDANODE2);
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	87 bb       	out	0x17, r24	; 23
	return(darkness);
}
  da:	c9 01       	movw	r24, r18
  dc:	08 95       	ret

000000de <flash_leds>:

 //Flash
 void flash_leds(uint16_t ontime)
 {
	 MYPORT |= (1<<LEDANODE1 | 1<<LEDANODE2);
  de:	28 b3       	in	r18, 0x18	; 24
  e0:	23 60       	ori	r18, 0x03	; 3
  e2:	28 bb       	out	0x18, r18	; 24
	 var_delay_10us(ontime);
  e4:	ad df       	rcall	.-166    	; 0x40 <var_delay_10us>
	 MYPORT &= ~(1<<LEDANODE1 | 1<<LEDANODE2);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8c 7f       	andi	r24, 0xFC	; 252
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	08 95       	ret

000000ee <init_wdt>:

//WDT-Interrupt-init
// START 8s TIMER, STROMVERBRAUCH 6 MIKROAMPRE
void init_wdt()
{
	cli();
  ee:	f8 94       	cli
	MCUSR &= ~(1<<WDRF);
  f0:	84 b7       	in	r24, 0x34	; 52
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDIE) | (1<<WDP3) | (1<<WDP0) ;
  f6:	81 b5       	in	r24, 0x21	; 33
  f8:	81 66       	ori	r24, 0x61	; 97
  fa:	81 bd       	out	0x21, r24	; 33
	wdt_reset();
  fc:	a8 95       	wdr
	sei();
  fe:	78 94       	sei
 100:	08 95       	ret

00000102 <__vector_12>:
}


//WDT-Interrupt
ISR(WDT_vect)  // wakeup from sleeping
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
	wdtcnt++;
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	0f 90       	pop	r0
 128:	0f be       	out	0x3f, r0	; 63
 12a:	0f 90       	pop	r0
 12c:	1f 90       	pop	r1
 12e:	18 95       	reti

00000130 <main>:

int main(void)
{
    //init
	MYDDR |= 1<<PIEPA;
 130:	bb 9a       	sbi	0x17, 3	; 23
	MYDDR |= 1<<PIEPB;
 132:	bc 9a       	sbi	0x17, 4	; 23
	MYDDR |= 1<<LEDANODE1;
 134:	b8 9a       	sbi	0x17, 0	; 23
	MYDDR |= 1<<LEDANODE2;
 136:	b9 9a       	sbi	0x17, 1	; 23
	MYDDR |= 1<<LEDKATHODES;
 138:	ba 9a       	sbi	0x17, 2	; 23
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	87 7e       	andi	r24, 0xE7	; 231
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	85 bf       	out	0x35, r24	; 53
	init_wdt();
 142:	d5 df       	rcall	.-86     	; 0xee <init_wdt>
		
	//Job
	sei();
 144:	78 94       	sei
	while(1) 
    {
		if(wdtcnt & 1)
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	80 ff       	sbrs	r24, 0
 150:	33 c0       	rjmp	.+102    	; 0x1b8 <main+0x88>
		{
			piepsen(1000, 5);
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	88 ee       	ldi	r24, 0xE8	; 232
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	80 df       	rcall	.-256    	; 0x5c <piepsen>
			piepsen(25, 200);
 15c:	68 ec       	ldi	r22, 0xC8	; 200
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	89 e1       	ldi	r24, 0x19	; 25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	7b df       	rcall	.-266    	; 0x5c <piepsen>
			piepsen(50, 500);
 166:	64 ef       	ldi	r22, 0xF4	; 244
 168:	71 e0       	ldi	r23, 0x01	; 1
 16a:	82 e3       	ldi	r24, 0x32	; 50
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	76 df       	rcall	.-276    	; 0x5c <piepsen>
			piepsen(100, 50);
 170:	62 e3       	ldi	r22, 0x32	; 50
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	84 e6       	ldi	r24, 0x64	; 100
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	71 df       	rcall	.-286    	; 0x5c <piepsen>
			piepsen(200, 25);
 17a:	69 e1       	ldi	r22, 0x19	; 25
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	88 ec       	ldi	r24, 0xC8	; 200
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	6c df       	rcall	.-296    	; 0x5c <piepsen>
			piepsen(500, 10);
 184:	6a e0       	ldi	r22, 0x0A	; 10
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	84 ef       	ldi	r24, 0xF4	; 244
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	67 df       	rcall	.-306    	; 0x5c <piepsen>
			piepsen(600, 8);
 18e:	68 e0       	ldi	r22, 0x08	; 8
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	88 e5       	ldi	r24, 0x58	; 88
 194:	92 e0       	ldi	r25, 0x02	; 2
 196:	62 df       	rcall	.-316    	; 0x5c <piepsen>
			piepsen(700, 7);
 198:	67 e0       	ldi	r22, 0x07	; 7
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	8c eb       	ldi	r24, 0xBC	; 188
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	5d df       	rcall	.-326    	; 0x5c <piepsen>
			piepsen(800, 6);
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	58 df       	rcall	.-336    	; 0x5c <piepsen>
			piepsen(1000, 5);
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	88 ee       	ldi	r24, 0xE8	; 232
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	53 df       	rcall	.-346    	; 0x5c <piepsen>
 1b6:	0c c0       	rjmp	.+24     	; 0x1d0 <main+0xa0>
		}
		
		else
		{
			piepsen(1000, 5);
 1b8:	65 e0       	ldi	r22, 0x05	; 5
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	88 ee       	ldi	r24, 0xE8	; 232
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	4d df       	rcall	.-358    	; 0x5c <piepsen>
			flash_leds(get_darkness());
 1c2:	67 df       	rcall	.-306    	; 0x92 <get_darkness>
 1c4:	8c df       	rcall	.-232    	; 0xde <flash_leds>
			piepsen(500, 10);
 1c6:	6a e0       	ldi	r22, 0x0A	; 10
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	84 ef       	ldi	r24, 0xF4	; 244
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	46 df       	rcall	.-372    	; 0x5c <piepsen>
		}
		sleep_mode();
 1d0:	85 b7       	in	r24, 0x35	; 53
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	85 bf       	out	0x35, r24	; 53
 1d6:	88 95       	sleep
 1d8:	85 b7       	in	r24, 0x35	; 53
 1da:	8f 7d       	andi	r24, 0xDF	; 223
 1dc:	85 bf       	out	0x35, r24	; 53
	}
 1de:	b3 cf       	rjmp	.-154    	; 0x146 <main+0x16>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
